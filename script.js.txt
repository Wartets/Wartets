const projects = [{{title: "My Music (SoundCloud)",description: "I create electronic, ambient, funky, and drumcore music. I focus on improving my skills and exploring new sounds. Check out my tracks and enjoy the beats!",image: "img/Soundcloud-card.jpg",link: "https://soundcloud.com/wartets",keywords: ["music", "electronic", "ambient", "soundcloud", "creative"]},{title: "My Music (YouTube)",description: "Explore my music projects on YouTube.",link: "https://www.youtube.com/@Wartets",noImage: true,keywords: ["music", "youtube", "electronic", "drumcore", "creative"]}}];function renderProjects(filteredProjects = null) {const main = document.querySelector('main');const linkDisplay = document.getElementById('link-display');const now = new Date();document.querySelectorAll('.project-card, .double-section').forEach(el => el.remove());const projectsToRender = filteredProjects || projects;let globalIndex = 0;projectsToRender.forEach(item => {const now = new Date();if (Array.isArray(item)) {const doubleSection = document.createElement('div');doubleSection.className = 'double-section';item.forEach(project => {const projectDate = new Date(project.timestamp || project.date);if (project.show == false || projectDate > now) return;if (project.visible !== false) {const card = createCard(project, globalIndex % 2 === 1);doubleSection.appendChild(card);globalIndex++;}});if (doubleSection.children.length > 0) {main.insertBefore(doubleSection, linkDisplay);}} else {const projectDate = new Date(item.timestamp || item.date);if (item.show == false || projectDate > now) return;if (item.visible !== false) {const card = createCard(item, globalIndex % 2 === 1);main.insertBefore(card, linkDisplay);globalIndex++;}}});}function createCard(project, isReversed) {const card = document.createElement('div');card.className = 'project-card';card.dataset.link = project.link;if (isReversed) card.classList.add('reverse');if (project.noImage) card.classList.add('no-image');if (project.timestamp) {const now = new Date();const projectDate = new Date(project.timestamp);const diffTime = Math.abs(now - projectDate);const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24)); if (diffDays <= 30.4375 * 3/4) {const newLabel = document.createElement('div');newLabel.className = 'new-label';newLabel.textContent = 'NEW';card.appendChild(newLabel);}}if (project.github) {  const githubMatch = project.github.match(/github\.com\/([^/]+)\/([^/]+)/);  if (githubMatch) {const [, owner, repo] = githubMatch;fetch(`https://api.github.com/repos/${owner}/${repo}`)  .then(response => response.json())  .then(data => {const pushedAt = new Date(data.pushed_at);const postedAt = new Date(project.timestamp);const now = new Date();const msIn30Days = 30.4375 * 24 * 60 * 60 * 1000;const ageSincePosted = now - postedAt;const ageSinceUpdate = now - pushedAt;if (ageSincePosted > msIn30Days && ageSinceUpdate < msIn30Days) {  const updatedLabel = document.createElement('div');  updatedLabel.className = 'updated-label';  updatedLabel.textContent = 'UPDATED';  card.appendChild(updatedLabel);}  })  .catch(err => {console.warn(`GitHub recovery failed for ${project.title}`, err);  });  }}card.onclick = () => window.open(project.link, '_blank');if (!project.noImage) {const imgContainer = document.createElement('div');imgContainer.className = 'image-container';const img = document.createElement('img');img.src = project.image;img.alt = `${project.title} preview`;imgContainer.appendChild(img);card.appendChild(imgContainer);}const content = document.createElement('div');content.className = 'content-container';const title = document.createElement('h2');title.textContent = project.date ? `${project.title} (${project.date})` : project.title;content.appendChild(title);const desc = document.createElement('p');desc.textContent = project.description;content.appendChild(desc);card.appendChild(content);return card;}function scrollToTop() {window.scrollTo({top: 0,behavior: "smooth"});}function addHoverEffect(element) {let lastRotation = parseFloat(element.style.transform.match(/rotate\(([-\d.]+)deg\)/)?.[1] || 0);element.addEventListener('mouseover', function () {element.style.transition = 'transform 0.5s ease';const newRotation = lastRotation;element.style.transform += ` rotate(${newRotation}deg)`;lastRotation = newRotation % 360;});}function processProjects({ searchTerm = '', category = 'all', sortValue = 'date-desc' } = {}) {const cloned = projects.map(item => Array.isArray(item) ? item.map(p => ({ ...p })) : { ...item });const term = searchTerm.toLowerCase().trim();const isSearching = term.length > 0;const isCategorized = category !== 'all';let filtered = cloned.filter(item => {const matchText = p => ((p.title + ' ' + p.description + ' ' + (p.keywords || []).join(' ')).toLowerCase().includes(term));const matchCategory = p =>category === 'all' || (p.keywords || []).includes(category);if (Array.isArray(item)) {const kept = item.filter(p => {return ((!isSearching || matchText(p)) &&(!isCategorized || matchCategory(p)));});if (kept.length) {kept.forEach(p => (p.visible = true));return true;}return false;} else {const ok = (!isSearching || matchText(item)) &&(!isCategorized || matchCategory(item));if (ok) item.visible = true;return ok;}});const getMaxTimestamp = el => {if (Array.isArray(el)) {return Math.max(...el.map(p => (p.timestamp ? new Date(p.timestamp).getTime() : 0)));}return el.timestamp ? new Date(el.timestamp).getTime() : 0;};const getTitle = el =>(Array.isArray(el) ? el[0].title : el.title).toLowerCase();filtered.sort((a, b) => {switch (sortValue) {case 'date-asc':return getMaxTimestamp(a) - getMaxTimestamp(b);case 'date-desc':return getMaxTimestamp(b) - getMaxTimestamp(a);case 'title-asc':return getTitle(a).localeCompare(getTitle(b));case 'title-desc':return getTitle(b).localeCompare(getTitle(a));default:return 0;}});filtered.forEach(item => {if (Array.isArray(item)) {item.sort((a, b) => {if (sortValue.startsWith('date')) {const ta = a.timestamp ? new Date(a.timestamp).getTime() : 0;const tb = b.timestamp ? new Date(b.timestamp).getTime() : 0;return sortValue === 'date-asc' ? ta - tb : tb - ta;} else {return sortValue === 'title-asc'? a.title.toLowerCase().localeCompare(b.title.toLowerCase()): b.title.toLowerCase().localeCompare(a.title.toLowerCase());}});}});return filtered;}document.addEventListener('DOMContentLoaded', function () {renderProjects();updateScrollbarColors();setupThemeSelector();const title = document.querySelector('header h1');const letters = title.innerText.split('');const linkDisplay = document.getElementById('link-display');const backToTopButton = document.getElementById("back-to-top");title.innerHTML = '';letters.forEach(letter => {const span = document.createElement('span');span.innerText = letter;title.appendChild(span);});document.addEventListener('mouseover', (e) => {const card = e.target.closest('.project-card');if (card) {const link = card.dataset.link;if (link) {linkDisplay.innerHTML = `&#x2197; ${link}`;linkDisplay.classList.add('visible');}}});document.addEventListener('mouseout', (e) => {if (!e.relatedTarget || !e.relatedTarget.closest('.project-card')) {linkDisplay.classList.remove('visible');}});window.addEventListener("scroll", () => {if (window.scrollY > 200) {backToTopButton.classList.remove("hidden");} else {backToTopButton.classList.add("hidden");}});const searchContainer = document.createElement('div');searchContainer.id = 'search-container';const searchInput = document.createElement('input');searchInput.type = 'text';searchInput.id = 'search-input';searchInput.placeholder = 'Search for a project...';searchContainer.appendChild(searchInput);document.querySelector('header').appendChild(searchContainer);const sortContainer = document.createElement('div');sortContainer.id = 'sort-container';document.querySelector('header').appendChild(sortContainer);searchInput.addEventListener('input', function() {categoryFilter.value = 'all';const toRender = processProjects({searchTerm: this.value,category:   'all',sortValue:  sortSelect.value});document.body.classList.toggle('search-active', this.value.length > 0);renderProjects(toRender);adjustContainerHeight();});const categoryFilter = document.createElement('select');categoryFilter.id = 'category-filter';const defaultOption = document.createElement('option');defaultOption.value = 'all';defaultOption.textContent = 'All categories';categoryFilter.appendChild(defaultOption);const allKeywords = new Set();projects.forEach(item => {if (Array.isArray(item)) {item.forEach(project => {project.keywords.forEach(kw => allKeywords.add(kw));});} else {item.keywords.forEach(kw => allKeywords.add(kw));}});const sortedKeywords = [...allKeywords].sort();sortedKeywords.forEach(keyword => {const option = document.createElement('option');option.value = keyword;option.textContent = keyword;categoryFilter.appendChild(option);});searchContainer.appendChild(categoryFilter);categoryFilter.addEventListener('change', function() {searchInput.value = '';const toRender = processProjects({searchTerm: '',category:   this.value,sortValue:  sortSelect.value});document.body.classList.toggle('search-active', this.value !== 'all');renderProjects(toRender);adjustContainerHeight();});const sortSelect = document.createElement('select');sortSelect.id = 'sort-select';const sortOptions = [{ value: 'date-desc', text: 'Newest first' },{ value: 'date-asc', text: 'Oldest first' },{ value: 'title-asc', text: 'A → Z' },{ value: 'title-desc', text: 'Z → A' }];sortOptions.forEach(opt => {const option = document.createElement('option');option.value = opt.value;option.textContent = opt.text;sortSelect.appendChild(option);});searchContainer.appendChild(sortSelect);sortSelect.addEventListener('change', function() {const toRender = processProjects({searchTerm: searchInput.value,category:   categoryFilter.value,sortValue:  this.value});renderProjects(toRender);adjustContainerHeight();});function filterProjectsByCategory(category) {if (category === 'all') {document.body.classList.remove('search-active');return projects;}document.body.classList.add('search-active');return projects.filter(item => {if (Array.isArray(item)) {return item.some(project => project.keywords.includes(category));}return item.keywords.includes(category);});}});